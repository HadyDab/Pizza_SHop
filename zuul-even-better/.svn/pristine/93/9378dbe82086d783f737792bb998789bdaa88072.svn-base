package de.fh_zwickau.oose.zuul.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import de.fh_zwickau.oose.zuul.model.NPC.Ghost;
import de.fh_zwickau.oose.zuul.model.NPC.NPC;
import de.fh_zwickau.oose.zuul.model.items.Candle;
import de.fh_zwickau.oose.zuul.model.items.Key;
import de.fh_zwickau.oose.zuul.model.items.OldTelephone;

/**
 * This class create a GameWorld in which are rooms.
 * A gameWorld is a building with a Name and a List of Rooms into it.
 * @author XardsLP
 *
 */
public class GameWorld {
	
	
	private String name; // Name of a Building
	private List<Room> rooms = new ArrayList<>(); // list of rooms in this Building
	private Map<String,Room> roomsWithName = new HashMap<>();
	
	
	/**
	 * Constructor for the Class GameWorld
	 * The GameWorld have a List with all Rooms into it. 
	 * TODO: Later add a list of rooms for the different floors. 
	 * @param name the name of the GameWorld
	 */
	public GameWorld(String name) {
		this.name = name;
	}
	
	/**
	 * @return name the name of the GameWorld.
	 */
	public String getName() {
		return name;
	}

	/**
	 * @return the rooms
	 */
	public List<Room> getRooms() {
		return rooms;
	}

	/**
	 * Add Rooms to a Building.
	 * @param room the room to be added
	 */
	public void addRoom(Room room) {
		this.rooms.add(room);
	}
	
	
	/**
	 * Link Rooms with Names and add them to a Map
	 * @param name
	 * @param room
	 */
	public void addRoomsWithName(String name, Room room) {
		this.roomsWithName.put(name, room);
	}
	
	
	
	public Room getThisRoombyName(String name) {
		if(this.roomsWithName.containsKey(name)) {
			return this.roomsWithName.get(name);
		} else {
			return null;
		}
	}
	
	
	
	/**
	 * Build a GameWorld with rooms and a player into this.
	 * @param player the player that play the game
	 */
	public void buildGameWorld(Player player) {
	
	Room outSide, kitchen, livingRoom, diningRoom, sleepingRoom, bigHall, corridor,
   	 WC, conservatory, cellarStairs, FloorStairs, garden;

	// create the rooms with description and add it to a list of Rooms 
	addRoom(garden = new Room("in the garden"));
	addRoom(outSide = new Room("at the main entrance of the Building"));
    addRoom(kitchen = new Room("in the kitchen"));
    addRoom(livingRoom = new Room("in the living room "));
   // addRoom(kitchen = new Room("in the kitchen "));
    addRoom(diningRoom = new Room("in the dining room"));
    addRoom(sleepingRoom = new Room("in the small hall"));
    addRoom(bigHall = new Room("in the big hall at the top is a chandelier"));
    addRoom(corridor = new Room("in the corridor"));
    addRoom(WC = new Room("now in the WC"));
    addRoom(conservatory = new Room("in the conservatory"));    
    addRoom(cellarStairs = new Room("on the stair down to the cellar"));
    addRoom(FloorStairs = new Room("on the stair lower floor"));
    
    
    
    //create a map linking rooms to name
    
    addRoomsWithName("garden", garden);
    addRoomsWithName("outside", outSide);
    addRoomsWithName("kitchen", kitchen);
    addRoomsWithName("livingRoom", livingRoom);
    addRoomsWithName("diningRoom", diningRoom);
    addRoomsWithName("sleepingRoom", sleepingRoom);
    addRoomsWithName("bigHall", bigHall);
    addRoomsWithName("corridor", corridor);
    addRoomsWithName("WC", WC);
    addRoomsWithName("conservatory", conservatory);
    addRoomsWithName("cellarStairs", cellarStairs);
    addRoomsWithName("FloorStairs", FloorStairs);
  
    
    
    

    
    //set the pictures for the room and the position
    
    outSide.setRoomImageWithLookingDirection("south", "file:src/resources/images/outside.jpg");
    outSide.setPlayerPosition("south", "file:src/resources/positions/Outside.png");
    
    garden.setRoomImageWithLookingDirection("north", "file:src/resources/images/garden.jpg");
    garden.setRoomImageWithLookingDirection("west", "file:src/resources/images/garden.jpg");
    garden.setPlayerPosition("north", "file:src/resources/positions/Garden.png");
    garden.setPlayerPosition("west", "file:src/resources/positions/Garden.png");
    
    
    corridor.setRoomImageWithLookingDirection("east", "file:src/resources/images/flur.jpg");
    corridor.setPlayerPosition("east", "file:src/resources/positions/Corridor.png");
    
    corridor.setRoomImageWithLookingDirection("south", "file:src/resources/images/flur3.jpg");
    corridor.setPlayerPosition("south", "file:src/resources/positions/Corridor.png");
    
    corridor.setRoomImageWithLookingDirection("north", "file:src/resources/images/flur2.jpg");
    corridor.setPlayerPosition("north", "file:src/resources/positions/Corridor.png");
    
    
    WC.setRoomImageWithLookingDirection("north", "file:src/resources/images/WC.jpg");
    WC.setPlayerPosition("north", "file:src/resources/positions/Wc.png");
    
    WC.setRoomImageWithLookingDirection("west", "file:src/resources/images/WC2.jpg");
    WC.setPlayerPosition("west", "file:src/resources/positions/Wc.png");
    
    
    diningRoom.setRoomImageWithLookingDirection("east", "file:src/resources/images/Esszimmer3.jpg");
    diningRoom.setPlayerPosition("east", "file:src/resources/positions/DiningRoom.png");
    
    diningRoom.setRoomImageWithLookingDirection("north", "file:src/resources/images/Esszimmer2.jpg");
    diningRoom.setPlayerPosition("north", "file:src/resources/positions/DiningRoom.png");
    
    diningRoom.setRoomImageWithLookingDirection("west", "file:src/resources/images/Esszimmer.jpg");
    diningRoom.setPlayerPosition("west", "file:src/resources/positions/DiningRoom.png");
    
    
    livingRoom.setRoomImageWithLookingDirection("east","file:src/resources/images/Wohnzimmer2.jpg");
    livingRoom.setPlayerPosition("east", "file:src/resources/positions/LivingRoom.png");
    
    livingRoom.setRoomImageWithLookingDirection("north", "file:src/resources/images/Wohnzimmer.jpg");
    livingRoom.setPlayerPosition("north", "file:src/resources/positions/LivingRoom.png");
    
    
    sleepingRoom.setRoomImageWithLookingDirection("south", "file:src/resources/images/Schlafzimmer.jpg");
    sleepingRoom.setPlayerPosition("south", "file:src/resources/positions/BedRoom.png");
    
    sleepingRoom.setRoomImageWithLookingDirection("north", "file:src/resources/images/Schlafzimmer2.jpg");
    sleepingRoom.setPlayerPosition("north", "file:src/resources/positions/BedRoom.png");
    
    
    conservatory.setRoomImageWithLookingDirection("south", "file:src/resources/images/Conservatory.jpg");
    conservatory.setPlayerPosition("south", "file:src/resources/positions/Conservatory.png");
    
    
    kitchen.setRoomImageWithLookingDirection("south", "file:src/resources/images/K%C3%BCche3.jpg");
    kitchen.setPlayerPosition("south", "file:src/resources/positions/Kitchen.png");
    
    kitchen.setRoomImageWithLookingDirection("north", "file:src/resources/images/K%C3%BCche.jpg");
    kitchen.setPlayerPosition("north", "file:src/resources/positions/Kitchen.png");
    
    kitchen.setRoomImageWithLookingDirection("east", "file:src/resources/images/K%C3%BCche2.jpg");
    kitchen.setPlayerPosition("east", "file:src/resources/positions/Kitchen.png");
    
    
    cellarStairs.setRoomImageWithLookingDirection("south", "file:src/resources/images/Trappe%20Keller.jpg");
    cellarStairs.setPlayerPosition("south", "file:src/resources/positions/CellarStairs.png");
    
    
    bigHall.setRoomImageWithLookingDirection("south", "file:src/resources/images/Gro%C3%9Fe%20Saal.jpg");
    bigHall.setPlayerPosition("south", "file:src/resources/positions/BigHall.png");
    
    bigHall.setRoomImageWithLookingDirection("west", "file:src/resources/images/Gro%C3%9Fe%20Saal2.jpg");
    bigHall.setPlayerPosition("west", "file:src/resources/positions/BigHall.png");
    
    bigHall.setRoomImageWithLookingDirection("east", "file:src/resources/images/Gro%C3%9Fe%20Saal3.jpg");
    bigHall.setPlayerPosition("east", "file:src/resources/positions/BigHall.png");
    
    
    FloorStairs.setRoomImageWithLookingDirection("west", "file:src/resources/images/Trappe%20Etage.jpg");
    FloorStairs.setPlayerPosition("west", "file:src/resources/positions/FloorStairs.png");
    
 
    //  Ghost in the gameWorld
    NPC ghost = new Ghost("Hannaliya Hellwark");
    ghost.addImage(WC.getShortDescription(), "file:src/resources/images/ghost2.png"); 
    ghost.addOptions("1", "[1] How can i get rid of you");
    ghost.addOptions("2", "[2] Have completed your task");
    ghost.addOptionanswer("1", "Find the oldkey and put it back in the livingroom");
    ghost.addOptionanswer("2", "No i wont be here anymore if you have done so");
    
    
    // Initialize room exits, closed doors and items. 
    outSide.setExit("north", garden);
    outSide.addItemstoRoom("telephone", new OldTelephone());
    
    garden.setExit("south", outSide);
    garden.setExit("east", corridor);
    
    corridor.setExit("west", garden);
    corridor.setExit("north", WC);   
    corridor.setExit("south", bigHall);
    
    WC.setNPC(ghost);
    WC.setExit("south", corridor);
    WC.setExit("east", diningRoom);
    
    WC.addItemstoRoom("oldKey", new Key());
    WC.addItemstoRoom("oldKey2", new Key());
    WC.addItemstoRoom("oldKey3", new Key());
    
    diningRoom.setExit("west", WC);
    diningRoom.setExit("south", kitchen);
    diningRoom.setExit("east", livingRoom);
    
    //livingRoom.setLock(true);
    livingRoom.setExit("west", diningRoom);
    livingRoom.setExit("south", sleepingRoom);
    livingRoom.addItemstoRoom("studdedKey", new Key());
    
    sleepingRoom.setExit("north", livingRoom);
    sleepingRoom.setExit("south", conservatory);
    sleepingRoom.addItemstoRoom("candle", new Candle());
    
    conservatory.setExit("north", sleepingRoom);
    
    kitchen.setExit("north", diningRoom);
    kitchen.setExit("south", cellarStairs);
    kitchen.setExit("west", bigHall);
    
    cellarStairs.setExit("north", kitchen);
    
    bigHall.setExit("east", kitchen);
    bigHall.setExit("north", corridor);
    bigHall.setExit("west", FloorStairs);
    
    FloorStairs.setExit("east", bigHall);
    
    //Set the start position of the player
    player.setCurrentRoom(outSide);
	
	}
	
//	/**
//	 * Generate a random start position.
//	 * If the position is in a part of the gameWorld that is locked 
//	 * a new random number will be calculate.
//	 * @return room the random room that was calculated
//	 */
//	public Room generateRandomStartPosition() {
//	    int randomNr = (int) (Math.random()*rooms.size());
//		while (randomNr >= rooms.size()-4) { // TODO: Minus durch verschlossene T�r gesperrte R�ume
//		
//			randomNr = (int) (Math.random()*rooms.size());
//		}
//	    Room room = rooms.get(randomNr);
//	    return room;
//	}
	
}
